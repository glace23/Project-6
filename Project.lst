Microsoft (R) Macro Assembler Version 14.28.29334.0	    12/05/20 11:57:18
2String Primitives and Macros     (Proj6_lisco.asm	     Page 1 - 1


				TITLE String Primitives and Macros     (Proj6_lisco.asm)

				; Author: Scott Li
				; Last Modified: 12/04/20 - 15:00
				; OSU email address: lisco@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number:  Project 6         
				; Due Date: 12/06/20
				; Description: This program takes user input numeric values as strings. Then converts and stores them into an array of signed dword values.  
				;				Diplays the array, sum and avg of all values as strings.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				;	Macros

				; ---------------------------------------------------------------------------------
				; Name: mGetString
				;
				; Gets a user inputted integer value as string
				;
				; Preconditions: do not use registers other than EAX, ECX and EDX
				;
				; Receives:
				; stringIn = string prompt address	(reference, input)
				; stringOut = string to store user input number value address	(reference, output)
				; length = user input's length	(output)
				;
				; returns: StringOut = user input number value as string representation's address
				;			length = user input's length
				; ---------------------------------------------------------------------------------
				mGetString MACRO stringIn, stringOut, length
					;	preserve registers
					PUSH	EAX
					PUSH	ECX
					PUSH	EDX

					; display input param
					MOV		EDX, stringIn
					CALL	WriteString

					; take input into memory
					MOV		EDX, stringOut
					MOV		ECX, 13
					CALL	ReadString
					MOV		length, EAX

					;	restore registers
					POP		EDX
					POP		ECX
					POP		EAX
				ENDM

				; ---------------------------------------------------------------------------------
				; Name: mDisplayString
				;
				; displays a string to console
				;
				; Preconditions: do not use registers other than EDX
				;
				; Receives:
				; stringA = string to display's address	(reference, input)
				;
				; returns: none
				; ---------------------------------------------------------------------------------
				mDisplayString MACRO stringA
					;	preserve registers
					PUSH	EDX

					MOV		EDX, stringA
					CALL	WriteString

					;	restore registers
					POP		EDX
					
				ENDM

 = 0000000A				MAX = 10		; max numbers to input

 00000000			.data
					; Main program
 00000000 44 65 73 69 67		programTitle	BYTE	"Designing low-level I/O procedures, ",0Ah
	   6E 69 6E 67 20
	   6C 6F 77 2D 6C
	   65 76 65 6C 20
	   49 2F 4F 20 70
	   72 6F 63 65 64
	   75 72 65 73 2C
	   20 0A
 00000025  57 72 69 74 74						BYTE	"Written by Scott Li",0
	   65 6E 20 62 79
	   20 53 63 6F 74
	   74 20 4C 69 00
 00000039 50 6C 65 61 73		intro_1			BYTE	"Please provide 10 signed decimal integers. [-2,147,483,648, +2,147,483,647]",0Ah
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 20 5B 2D
	   32 2C 31 34 37
	   2C 34 38 33 2C
	   36 34 38 2C 20
	   2B 32 2C 31 34
	   37 2C 34 38 33
	   2C 36 34 37 5D
	   0A
 00000085  45 61 63 68 20						BYTE	"Each number needs to be small enough to fit inside a 32 bit register.",0Ah
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
	   66 69 74 20 69
	   6E 73 69 64 65
	   20 61 20 33 32
	   20 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 0A
 000000CB  41 66 74 65 72						BYTE	"After you have finished inputting the numbers I will display a list of the integers, their sum, and their average value.",0 
	   20 79 6F 75 20
	   68 61 76 65 20
	   66 69 6E 69 73
	   68 65 64 20 69
	   6E 70 75 74 74
	   69 6E 67 20 74
	   68 65 20 6E 75
	   6D 62 65 72 73
	   20 49 20 77 69
	   6C 6C 20 64 69
	   73 70 6C 61 79
	   20 61 20 6C 69
	   73 74 20 6F 66
	   20 74 68 65 20
	   69 6E 74 65 67
	   65 72 73 2C 20
	   74 68 65 69 72
	   20 73 75 6D 2C
	   20 61 6E 64 20
	   74 68 65 69 72
	   20 61 76 65 72
	   61 67 65 20 76
	   61 6C 75 65 2E
	   00
 00000144 50 6C 65 61 73		prompt			BYTE	"Please enter an signed number: ",0
	   65 20 65 6E 74
	   65 72 20 61 6E
	   20 73 69 67 6E
	   65 64 20 6E 75
	   6D 62 65 72 3A
	   20 00
 00000164  0000000E [			numString		BYTE	14 DUP(?),0
	    00
	   ] 00
 00000173 00000000			len				DWORD	?
 00000177  0000000A [			numArray		SDWORD	10 DUP(?)
	    00000000
	   ]
 0000019F 00000000			digit			DWORD	?
 000001A3 45 52 52 4F 52		error			BYTE	"ERROR! Invalid input, please try again!",0
	   21 20 49 6E 76
	   61 6C 69 64 20
	   69 6E 70 75 74
	   2C 20 70 6C 65
	   61 73 65 20 74
	   72 79 20 61 67
	   61 69 6E 21 00
 000001CB  0000000D [			display			BYTE	13 DUP(?),0
	    00
	   ] 00
 000001D9 20 00				space			BYTE	" ",0
 000001DB 59 6F 75 20 68		list			BYTE	"You have entered the following numbers: ",0
	   61 76 65 20 65
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 20
	   00
 00000204 54 68 65 20 73		sumStr			BYTE	"The sum of all values entered is: ",0
	   75 6D 20 6F 66
	   20 61 6C 6C 20
	   76 61 6C 75 65
	   73 20 65 6E 74
	   65 72 65 64 20
	   69 73 3A 20 00
 00000227 00000000			sum				SDWORD	?	
 0000022B 54 68 65 20 61		avgStr			BYTE	"The average of all values entered is: ",0
	   76 65 72 61 67
	   65 20 6F 66 20
	   61 6C 6C 20 76
	   61 6C 75 65 73
	   20 65 6E 74 65
	   72 65 64 20 69
	   73 3A 20 00
 00000252 00000000			avg				SDWORD	?
					

					;	EC
 00000256 2A 2A 45 43 3A		ecIntro			BYTE	"**EC: DESCRIPTION:",0Ah
	   20 44 45 53 43
	   52 49 50 54 49
	   4F 4E 3A 0A
 00000269  2A 2A 31 2E 20						BYTE	"**1. Number each line of user input and display a running subtotal of the user¡¯s valid numbers. These displays must use WriteVal. (1 pt)",0
	   4E 75 6D 62 65
	   72 20 65 61 63
	   68 20 6C 69 6E
	   65 20 6F 66 20
	   75 73 65 72 20
	   69 6E 70 75 74
	   20 61 6E 64 20
	   64 69 73 70 6C
	   61 79 20 61 20
	   72 75 6E 6E 69
	   6E 67 20 73 75
	   62 74 6F 74 61
	   6C 20 6F 66 20
	   74 68 65 20 75
	   73 65 72 A1 AF
	   73 20 76 61 6C
	   69 64 20 6E 75
	   6D 62 65 72 73
	   2E 20 54 68 65
	   73 65 20 64 69
	   73 70 6C 61 79
	   73 20 6D 75 73
	   74 20 75 73 65
	   20 57 72 69 74
	   65 56 61 6C 2E
	   20 28 31 20 70
	   74 29 00
 000002F3 00000001			count			DWORD	1
 000002F7 29 20 00			bracket			BYTE	") ",0
 000002FA 54 6F 74 61 6C		runningTotal	BYTE	"Total of valid numbers entered: ",0
	   20 6F 66 20 76
	   61 6C 69 64 20
	   6E 75 6D 62 65
	   72 73 20 65 6E
	   74 65 72 65 64
	   3A 20 00
 0000031B 00000000			total			DWORD	0
 0000031F  0000000A [			FloatArray		REAL10	10 DUP(?)
	    00000000000000000000
	   ]


 00000000			.code
 00000000			main PROC
				; (insert executable instructions here)

					;	introduction
 00000000  68 00000256 R		PUSH	OFFSET ecIntro
 00000005  68 00000039 R		PUSH	OFFSET intro_1
 0000000A  68 00000000 R		PUSH	OFFSET programTitle
 0000000F  E8 00000094			CALL	introduction

					;	ReadVal
 00000014  FF 35 0000031B R		PUSH	total
 0000001A  68 000002FA R		PUSH	OFFSET runningTotal
 0000001F  68 000001CB R		PUSH	OFFSET display
 00000024  6A 0A			PUSH	MAX
 00000026  68 000002F7 R		PUSH	OFFSET bracket
 0000002B  FF 35 000002F3 R		PUSH	count
 00000031  68 000001A3 R		PUSH	OFFSET error
 00000036  68 00000177 R		PUSH	OFFSET numArray
 0000003B  68 00000173 R		PUSH	OFFSET len
 00000040  68 00000164 R		PUSH	OFFSET numString
 00000045  68 00000144 R		PUSH	OFFSET prompt
 0000004A  E8 00000092			CALL	ReadVal

					;	display array
 0000004F  68 000001D9 R		PUSH	OFFSET space
 00000054  68 000001DB R		PUSH	OFFSET list
 00000059  6A 0A			PUSH	MAX
 0000005B  68 00000177 R		PUSH	OFFSET numArray
 00000060  68 000001CB R		PUSH	OFFSET display
 00000065  E8 000002A8			CALL	displayArray

					;	display sum
 0000006A  68 00000227 R		PUSH	OFFSET sum
 0000006F  68 00000204 R		PUSH	OFFSET sumStr
 00000074  6A 0A			PUSH	MAX
 00000076  68 00000177 R		PUSH	OFFSET numArray
 0000007B  68 000001CB R		PUSH	OFFSET display
 00000080  E8 000002D5			CALL	displaySum

					;	display avg
 00000085  FF 35 00000227 R		PUSH	sum
 0000008B  68 0000022B R		PUSH	OFFSET avgStr
 00000090  6A 0A			PUSH	MAX
 00000092  68 00000252 R		PUSH	OFFSET avg
 00000097  68 000001CB R		PUSH	OFFSET display
 0000009C  E8 00000303			CALL	displayAvg

					Invoke	ExitProcess,0
 000000A1  6A 00	   *	    push   +000000000h
 000000A3  E8 00000000 E   *	    call   ExitProcess
 000000A8			main ENDP


				; ---------------------------------------------------------------------------------
				; Name: introduction
				;
				; prints introduction by using the macro mDisplayString
				;
				; Preconditions: ecIntro, Intro_1, and programTitle are strings
				;
				; Postconditions: none.
				;
				; Receives:
				;			[EBP + 16] = ecIntro	(input)
				;			[EBP + 12] = intro_1	(input)
				;			[EBP + 8] = programTitle	(input)
				; 
				;
				; returns: None
				; ---------------------------------------------------------------------------------
 000000A8			introduction PROC
 000000A8  55				PUSH	EBP
 000000A9  8B EC			MOV		EBP, ESP

					mDisplayString	[EBP + 8]			; programTitle
 000000AB  52		     1		PUSH	EDX
 000000AC  8B 55 08	     1		MOV		EDX, [EBP + 8]
 000000AF  E8 00000000 E     1		CALL	WriteString
 000000B4  5A		     1		POP		EDX
 000000B5  E8 00000000 E		CALL	CrLf
					mDisplayString	[EBP + 12]			; intro_1
 000000BA  52		     1		PUSH	EDX
 000000BB  8B 55 0C	     1		MOV		EDX, [EBP + 12]
 000000BE  E8 00000000 E     1		CALL	WriteString
 000000C3  5A		     1		POP		EDX
 000000C4  E8 00000000 E		CALL	CrLf
					mDisplayString	[EBP + 16]			; ecIntro
 000000C9  52		     1		PUSH	EDX
 000000CA  8B 55 10	     1		MOV		EDX, [EBP + 16]
 000000CD  E8 00000000 E     1		CALL	WriteString
 000000D2  5A		     1		POP		EDX
 000000D3  E8 00000000 E		CALL	CrLf
 000000D8  E8 00000000 E		CALL	CrLf

 000000DD  5D				POP		EBP

 000000DE  C2 0008			RET		8
 000000E1			introduction ENDP


				; ---------------------------------------------------------------------------------
				; Name: ReadVal
				;
				; takes a userinput of a integer as string values between [-2,147,483,648, +2,147,483,647], 
				;	and convert them into signed integer values store them to numArray
				;
				; Preconditions: 'prompt', 'numString', 'error' 'bracket', 'runningTotal', 'display' are strings
				;				 'len', 'count', 'total' are unsigned integers
				;				 'numArray' is a signed array
				;				 'MAX' is a global variable
				;
				; Postconditions: None
				;
				; Receives: [EBP + 8] 'prompt'	(macro reference, input), 
				;			[EBP + 12] 'numString'	(macro reference, input), 
				;			[EBP + 16] 'len'	(macro reference, input)
				;			[EBP + 20] 'numArray'	(reference, output)
				;			[EBP + 24] 'error'	  (reference, input)
				;			[EBP + 28] 'count'	  (output)
				;			[EBP + 32] 'bracket'  (macro reference input)
				;			[EBP + 36] 'MAX'	(global variable, input)
				;			[EBP + 40] 'display'	(reference, output)
				;			[EBP + 44] 'runningTotal'	(reference, input)
				;			[EBP + 48] 'total'	(output)
				;
				; Returns: numArray is changed to fill 10 signed integers. 
				;			len is changed into user input's length
				;			count and total are changed into values equal to MAX and MAX - 1.
				;			display is changed.
				; ---------------------------------------------------------------------------------
 000000E1			ReadVal PROC
					;	preserve registers and flags
 000000E1  55				PUSH	EBP
 000000E2  8B EC			MOV		EBP, ESP
 000000E4  50				PUSH	EAX
 000000E5  53				PUSH	EBX
 000000E6  51				PUSH	ECX
 000000E7  52				PUSH	EDX
 000000E8  56				PUSH	ESI
 000000E9  57				PUSH	EDI
 000000EA  9C				PUSHFD						

					; initiate outer loop values
 000000EB  8B 4D 24			MOV		ECX, [EBP + 36]		;	MAX, outer loop counter
 000000EE  8B 7D 14			MOV		EDI, [EBP + 20]		;	numarray

					; outer loop
 000000F1			_prompt:	
					; display counted lines
 000000F1  FF 75 1C			PUSH	[EBP + 28]			;	count
 000000F4  FF 75 28			PUSH	[EBP + 40]			;	display
 000000F7  E8 00000194			CALL	WriteVal
					mDisplayString	[EBP + 32]	;	bracket
 000000FC  52		     1		PUSH	EDX
 000000FD  8B 55 20	     1		MOV		EDX, [EBP + 32]
 00000100  E8 00000000 E     1		CALL	WriteString
 00000105  5A		     1		POP		EDX

					; mGetString prompt, numString, len
					mGetString	[EBP + 8], [EBP + 12], [EBP + 16]
 00000106  50		     1		PUSH	EAX
 00000107  51		     1		PUSH	ECX
 00000108  52		     1		PUSH	EDX
 00000109  8B 55 08	     1		MOV		EDX, [EBP + 8]
 0000010C  E8 00000000 E     1		CALL	WriteString
 00000111  8B 55 0C	     1		MOV		EDX, [EBP + 12]
 00000114  B9 0000000D	     1		MOV		ECX, 13
 00000119  E8 00000000 E     1		CALL	ReadString
 0000011E  89 45 10	     1		MOV		[EBP + 16], EAX
 00000121  5A		     1		POP		EDX
 00000122  59		     1		POP		ECX
 00000123  58		     1		POP		EAX


 00000124  FC				CLD
 00000125  B8 00000000			MOV		EAX, 0
 0000012A  8B 75 0C			MOV		ESI, [EBP + 12]		;	numString

					;	checks if user input has a sign in front
 0000012D			_checkSign:
 0000012D  8A 06			MOV		AL,	[ESI]
 0000012F  3C 2D			CMP		AL, 45				; - sign
 00000131  74 15			JE		_setNegative
 00000133  3C 2B			CMP		AL, 43				; + sign
 00000135  74 30			JE		_setPositive

 00000137  8B 45 10			MOV		EAX, [EBP + 16]		; len
 0000013A  83 F8 0A			CMP		EAX, 10 			; if len > 10, with no sign, then error
 0000013D  0F 8F 000000C1		JG		_error

 00000143  83 C8 01			OR		EAX, 1				; if no sign, assume positive, set sign to positive

 00000146  EB 3E			JMP		_checkVal

 00000148			_setNegative:
					; len - 1, ignore sign
 00000148  8B 45 10			MOV		EAX, [EBP + 16]		; len
 0000014B  83 F8 0B			CMP		EAX, 11				; if len > 11, sign + digit, then error
 0000014E  0F 8F 000000B0		JG		_error
 00000154  83 E8 01			SUB		EAX, 1
 00000157  89 45 10			MOV		[EBP + 16], EAX		

 0000015A  B8 00000000			MOV		EAX, 0
 0000015F  83 C6 01			ADD		ESI, 1				; increment to next byte after sign
 00000162  83 C8 FF			OR		EAX, -1				; set sign flag to 1

 00000165  EB 1F			JMP		_checkVal

 00000167			_setPositive:
					; len - 1, ignore sign
 00000167  8B 45 10			MOV		EAX, [EBP + 16]		; len
 0000016A  83 F8 0B			CMP		EAX, 11				; if len > 11, sign + digit, then error
 0000016D  0F 8F 00000091		JG		_error
 00000173  83 E8 01			SUB		EAX, 1
 00000176  89 45 10			MOV		[EBP + 16], EAX		

 00000179  B8 00000000			MOV		EAX, 0
 0000017E  83 C6 01			ADD		ESI, 1				; increment to next byte after sign
 00000181  83 C8 01			OR		EAX, 1				; set sign flag to 0

 00000184  EB 00			JMP		_checkVal


					; inner loop
 00000186				_checkVal:		
						;	initialize innter loop values
 00000186  51					PUSH	ECX					; preserve outer loop counter

						; preserve ESI and EDI for if notNum and sign flag for Pos/Neg check  
 00000187  56					PUSH	ESI					
 00000188  57					PUSH	EDI
 00000189  9C					PUSHFD

 0000018A  8B 4D 10				MOV		ECX, [EBP + 16]		; inner loop counter = len

						;	if number length = 10 and first digit > 2 then error
 0000018D  B8 00000000				MOV		EAX, 0
 00000192  8A 06				MOV		AL, [ESI]			; move digit to AL
 00000194  83 F9 0A				CMP		ECX, 10
 00000197  75 04				JNE		_convert			; if len < 10
 00000199  3C 34				CMP		AL, 52					
 0000019B  77 63				JA		_notNum				; if first digit > 2

					; check and convert number from string to integer
 0000019D				_convert:
						;	get digit at String Byte value
 0000019D  B8 00000000				MOV		EAX, 0
 000001A2  8A 06				MOV		AL, [ESI]			; move digit to AL

						;	check if numeric
 000001A4  83 F8 30				CMP		EAX, 48				; 0
 000001A7  74 2F				JE		_isNum
 000001A9  83 F8 31				CMP		EAX, 49				; 1
 000001AC  74 2A				JE		_isNum
 000001AE  83 F8 32				CMP		EAX, 50				; 2
 000001B1  74 25				JE		_isNum
 000001B3  83 F8 33				CMP		EAX, 51				; 3
 000001B6  74 20				JE		_isNum
 000001B8  83 F8 34				CMP		EAX, 52				; 4
 000001BB  74 1B				JE		_isNum
 000001BD  83 F8 35				CMP		EAX, 53				; 5
 000001C0  74 16				JE		_isNum
 000001C2  83 F8 36				CMP		EAX, 54				; 6
 000001C5  74 11				JE		_isNum
 000001C7  83 F8 37				CMP		EAX, 55				; 7
 000001CA  74 0C				JE		_isNum
 000001CC  83 F8 38				CMP		EAX, 56				; 8
 000001CF  74 07				JE		_isNum
 000001D1  83 F8 39				CMP		EAX, 57				; 9
 000001D4  74 02				JE		_isNum

 000001D6  EB 28				JMP		_notNum

					; if string is a number, add num to numArray, and modify exisiting numArray if needed
 000001D8				_isNum:
						;	calculate digit
 000001D8  8B D0				MOV		EDX, EAX
 000001DA  83 EA 30				SUB		EDX, 48

 000001DD  52					PUSH	EDX					; preserve digit

						;	exisiting digit push one order higher
 000001DE  8B 07				MOV		EAX, [EDI]
 000001E0  BB 0000000A				MOV		EBX, 10
 000001E5  F7 E3				MUL		EBX

 000001E7  5A					POP		EDX					;	restore digit
						;	add digit to new number, move back to array
 000001E8  03 C2				ADD		EAX, EDX
 000001EA  89 07				MOV		[EDI], EAX
									
 000001EC  AC					LODSB
 000001ED  E2 AE				LOOP	_convert

				; restore registers and flags, and go on to determine sign
 000001EF			_restore:		
					;	if num is out of range then error
 000001EF  8B 07			MOV		EAX, [EDI]
 000001F1  3D 80000000			CMP		EAX, 2147483648				; if [EDI] <= 2,147,483,648 for both negative and positive
 000001F6  77 08			JA		_notNum
					
					; restore EDI and ESI and sign flag
 000001F8  9D				POPFD						
 000001F9  5F				POP		EDI					
 000001FA  5E				POP		ESI
 000001FB  59				POP		ECX					; restore outer loop counter

 000001FC  78 3B			JS		_negNum				; if sign flag is 1
 000001FE  79 43			JNS		_posNum				; if sign flag is 0

				; restore registers and flags, clear exisiting value in position
 00000200			_notNum:
					; restore EDI and ESI and sign flag
 00000200  9D				POPFD						
 00000201  5F				POP		EDI					
 00000202  5E				POP		ESI
 00000203  59				POP		ECX					; restore outer loop counter

 00000204			_error:
 00000204  B8 00000000			MOV		EAX, 0				
 00000209  89 07			MOV		[EDI], EAX			; clear [EDI]


					mDisplayString	[EBP + 24]	; ERROR
 0000020B  52		     1		PUSH	EDX
 0000020C  8B 55 18	     1		MOV		EDX, [EBP + 24]
 0000020F  E8 00000000 E     1		CALL	WriteString
 00000214  5A		     1		POP		EDX
 00000215  E8 00000000 E		CALL	CrLf
						
					; valid numbers inputted 
					mDisplayString	[EBP + 44]	; runningTotal
 0000021A  52		     1		PUSH	EDX
 0000021B  8B 55 2C	     1		MOV		EDX, [EBP + 44]
 0000021E  E8 00000000 E     1		CALL	WriteString
 00000223  5A		     1		POP		EDX
 00000224  FF 75 30			PUSH	[EBP + 48]			; total
 00000227  FF 75 28			PUSH	[EBP + 40]			; display
 0000022A  E8 00000061			CALL	WriteVal
 0000022F  E8 00000000 E		CALL	CrLf

 00000234  E9 FFFFFEB8			JMP	_prompt

				; calculate value in position into negative
 00000239			_negNum:
 00000239  8B 17			MOV		EDX, [EDI]
 0000023B  33 C0			XOR		EAX, EAX
 0000023D  2B C2			SUB		EAX, EDX				; negate value from positive to negative, same as NOT EAX
 0000023F  89 07			MOV		[EDI], EAX				; move negated value back to [EDI]

 00000241  EB 0B			JMP	_displayValid

				; positive number already added, continue loop 
 00000243			_posNum:
 00000243  8B 07			MOV		EAX, [EDI]
 00000245  3D 7FFFFFFF			CMP		EAX, 2147483647				; [EDI] <= 2,147,483,647 for positive
 0000024A  77 B8			JA		_error
 0000024C  72 00			JNAE	_displayValid

 0000024E			_displayValid:
					; increase line number, count++
 0000024E  8B 45 1C			MOV		EAX, [EBP +28]				; count
 00000251  83 C0 01			ADD		EAX, 1
 00000254  89 45 1C			MOV		[EBP + 28], EAX		

					; increase total number, total++
 00000257  8B 45 30			MOV		EAX, [EBP +48]				; total
 0000025A  83 C0 01			ADD		EAX, 1
 0000025D  89 45 30			MOV		[EBP + 48], EAX

					; display valid numbers inputted 
					mDisplayString	[EBP + 44]			; runningTotal
 00000260  52		     1		PUSH	EDX
 00000261  8B 55 2C	     1		MOV		EDX, [EBP + 44]
 00000264  E8 00000000 E     1		CALL	WriteString
 00000269  5A		     1		POP		EDX
 0000026A  FF 75 30			PUSH	[EBP + 48]
 0000026D  FF 75 28			PUSH	[EBP + 40]					; display
 00000270  E8 0000001B			CALL	WriteVal
 00000275  E8 00000000 E		CALL	CrLf

 0000027A  49				DEC		ECX						; decrease ECX, jump if ECX = 0
 0000027B  E3 08			JECXZ	_pop
 0000027D  83 C7 04			ADD		EDI, 4					; move to next array elemnt

 00000280  E9 FFFFFE6C			JMP	_prompt


 00000285			_pop:
					;	restore registers and flags
 00000285  9D				POPFD							
 00000286  5F				POP		EDI
 00000287  5E				POP		ESI
 00000288  5A				POP		EDX
 00000289  59				POP		ECX
 0000028A  5B				POP		EBX
 0000028B  58				POP		EAX
 0000028C  5D				POP		EBP

 0000028D  C2 002C			RET		44
 00000290			ReadVal ENDP


				; ---------------------------------------------------------------------------------
				; Name: writeVal
				;
				; converts signed DWORD integers as strings
				;
				; Preconditions: 'display' is a string, 'some number' is a integer value
				;
				; Postconditions: none.
				;
				; Receives:
				;			[EBP + 12] = some number	(input)
				;			[EBP + 8] = display			(reference, output)
				; 
				;
				; returns: display is into string representation of some number
				; ---------------------------------------------------------------------------------
 00000290			WriteVal PROC
					;	preserve registers and flags
 00000290  55				PUSH	EBP
 00000291  8B EC			MOV		EBP, ESP
 00000293  50				PUSH	EAX
 00000294  53				PUSH	EBX
 00000295  51				PUSH	ECX
 00000296  52				PUSH	EDX
 00000297  56				PUSH	ESI
 00000298  57				PUSH	EDI
 00000299  9C				PUSHFD						

					;	clears exisiting value in display
 0000029A  B9 0000000B			MOV		ECX, 11
 0000029F  8B 7D 08			MOV		EDI, [EBP + 8]			; display
 000002A2			_clear_memory:
 000002A2  B8 00000000			MOV		EAX, 0
 000002A7  89 07			MOV		[EDI], EAX
 000002A9  83 C7 01			ADD		EDI, 1
 000002AC  E2 F4			LOOP	_clear_memory


 000002AE  FC				CLD
 000002AF  8B 7D 08			MOV		EDI, [EBP + 8]			; display
 000002B2  83 C7 0B			ADD		EDI, 11					; move to display's 11th BYTE

 000002B5  8B 45 0C			MOV		EAX, [EBP + 12]			; some number
 000002B8  83 F8 00			CMP		EAX, 0					; check number is negative or not
 000002BB  7C 02			JL		_negative
 000002BD  7D 09			JGE		_positive

					;	if number is negative, negates the number
 000002BF			_negative:
 000002BF  8B 55 0C			MOV		EDX, [EBP + 12]
 000002C2  33 C0			XOR		EAX, EAX
 000002C4  2B C2			SUB		EAX, EDX				; negate EAX from negative to positive, same as NOT EAX
 000002C6  EB 05			JMP		_divide

					;	if number is positive
 000002C8			_positive:
 000002C8  8B 45 0C			MOV		EAX, [EBP + 12]
 000002CB  EB 00			JMP		_divide

					;	divides number by 10 and put them into display as string representation
 000002CD			_divide:
					;	divide num/10
 000002CD  99				CDQ
 000002CE  BA 00000000			MOV		EDX, 0
 000002D3  BB 0000000A			MOV		EBX, 10
 000002D8  F7 F3			DIV		EBX

					;	add digit into [EDI] BYTE value
 000002DA  83 C2 30			ADD		EDX, 48					;	remainder + 48
 000002DD  01 17			ADD		[EDI], EDX
 000002DF  83 EF 01			SUB		EDI, 1
 000002E2  83 F8 00			CMP		EAX, 0
 000002E5  74 02			JE		_sign
 000002E7  EB E4			JMP		_divide

					;	adds sign value if number is negative
 000002E9			_sign:
 000002E9  8B 45 0C			MOV		EAX, [EBP + 12]
 000002EC  83 F8 00			CMP		EAX, 0					; if num > 0, then write. num < 0 add sign
 000002EF  7D 0A			JGE		_write

					;	add sign into [EDI] BYTE value
 000002F1  BA 0000002D			MOV		EDX, 45					;	remainder + 48
 000002F6  01 17			ADD		[EDI], EDX
 000002F8  83 EF 01			SUB		EDI, 1

 000002FB			_write:
 000002FB  83 C7 01			ADD		EDI, 1
					mDisplayString	EDI
 000002FE  52		     1		PUSH	EDX
 000002FF  8B D7	     1		MOV		EDX, EDI
 00000301  E8 00000000 E     1		CALL	WriteString
 00000306  5A		     1		POP		EDX


 00000307			_pop:
					;	restore registers and flags
 00000307  9D				POPFD							
 00000308  5F				POP		EDI
 00000309  5E				POP		ESI
 0000030A  5A				POP		EDX
 0000030B  59				POP		ECX
 0000030C  5B				POP		EBX
 0000030D  58				POP		EAX
 0000030E  5D				POP		EBP

 0000030F  C2 0008			RET		8
 00000312			WriteVal ENDP

				; ---------------------------------------------------------------------------------
				; Name: displayArray
				;
				; displays converted signed DWORD array as strings
				;
				; Preconditions: 'display', 'space', 'list' are strings, 'numArray' is an array with signed intgers
				;					'MAX' is a global variable
				;
				; Postconditions: none.
				;
				; Receives: [EBP + 24] = space		(reference, input)
				;			[EBP + 20] = list		(reference, input)
				;			[EBP + 16] = MAX		(global variable, input)
				;			[EBP + 12] = numArray	(reference, input)
				;			[EBP + 8] = display		(reference, output)
				; 
				;
				; returns: none
				; ---------------------------------------------------------------------------------
 00000312			displayArray PROC
					;	preserve registers and flags
 00000312  55				PUSH	EBP
 00000313  8B EC			MOV		EBP, ESP
 00000315  50				PUSH	EAX
 00000316  53				PUSH	EBX
 00000317  51				PUSH	ECX
 00000318  52				PUSH	EDX
 00000319  56				PUSH	ESI
 0000031A  57				PUSH	EDI
 0000031B  9C				PUSHFD					

					; initialize registers
 0000031C  8B 75 0C			MOV		ESI, [EBP + 12]		; numArray	
 0000031F  8B 4D 10			MOV		ECX, [EBP + 16]		; MAX

					mDisplayString	[EBP + 20]	; list
 00000322  52		     1		PUSH	EDX
 00000323  8B 55 14	     1		MOV		EDX, [EBP + 20]
 00000326  E8 00000000 E     1		CALL	WriteString
 0000032B  5A		     1		POP		EDX
 0000032C  E8 00000000 E		CALL	CrLf

					; print numbers from array
 00000331			_list:
 00000331  FF 36			PUSH	[ESI]
 00000333  FF 75 08			PUSH	[EBP + 8]			; display
 00000336  E8 FFFFFF55			CALL	WriteVal
					mDisplayString	[EBP + 24]	; space
 0000033B  52		     1		PUSH	EDX
 0000033C  8B 55 18	     1		MOV		EDX, [EBP + 24]
 0000033F  E8 00000000 E     1		CALL	WriteString
 00000344  5A		     1		POP		EDX
 00000345  83 C6 04			ADD		ESI, 4				; move to next array element
 00000348  E2 E7			LOOP	_list
 0000034A  E8 00000000 E		CALL	CrLf

					;	restore registers and flags
 0000034F  9D				POPFD						
 00000350  5F				POP		EDI
 00000351  5E				POP		ESI
 00000352  5A				POP		EDX
 00000353  59				POP		ECX
 00000354  5B				POP		EBX
 00000355  58				POP		EAX
 00000356  5D				POP		EBP

 00000357  C2 0014			RET		20
 0000035A			displayArray ENDP


				; ---------------------------------------------------------------------------------
				; Name: displaySum
				;
				; displays added sum of numArray as string representation
				;
				; Preconditions: 'display', 'sumStr' are strings, 'numArray' is an array with signed intgers
				;					'MAX' is a global variable,	 'sum' is an integer
				;
				; Postconditions: none.
				;
				; Receives: [EBP + 24] = sum		(reference, output)
				;			[EBP + 20] = sumStr		(reference, input)
				;			[EBP + 16] = MAX		(global variable, input)
				;			[EBP + 12] = numArray	(reference, input)
				;			[EBP + 8] = display		(reference, output)
				; 
				;
				; returns: sum = sum of values in numArray
				; ---------------------------------------------------------------------------------
 0000035A			displaySum PROC
					;	preserve registers and flags
 0000035A  55				PUSH	EBP
 0000035B  8B EC			MOV		EBP, ESP
 0000035D  50				PUSH	EAX
 0000035E  53				PUSH	EBX
 0000035F  51				PUSH	ECX
 00000360  52				PUSH	EDX
 00000361  56				PUSH	ESI
 00000362  57				PUSH	EDI
 00000363  9C				PUSHFD						

					; initialize registers
 00000364  8B 75 0C			MOV		ESI, [EBP + 12]		; numArray	
 00000367  8B 4D 10			MOV		ECX, [EBP + 16]		; MAX 
 0000036A  B8 00000000			MOV		EAX, 0
 0000036F  8B 7D 18			MOV		EDI, [EBP + 24]		; sum

					mDisplayString	[EBP + 20]	; sumstr
 00000372  52		     1		PUSH	EDX
 00000373  8B 55 14	     1		MOV		EDX, [EBP + 20]
 00000376  E8 00000000 E     1		CALL	WriteString
 0000037B  5A		     1		POP		EDX
 0000037C  E8 00000000 E		CALL	CrLf

					; add numbers from array to EAX
 00000381			_sum:
 00000381  03 06			ADD		EAX, [ESI]
 00000383  83 C6 04			ADD		ESI, 4
 00000386  E2 F9			LOOP	_sum

					; move EAX to sum
 00000388  89 07			MOV		[EDI], EAX	

 0000038A  FF 37			PUSH	[EDI]				
 0000038C  FF 75 08			PUSH	[EBP + 8]			; display
 0000038F  E8 FFFFFEFC			CALL	WriteVal
 00000394  E8 00000000 E		CALL	CrLf

					;	restore registers and flags
 00000399  9D				POPFD						
 0000039A  5F				POP		EDI
 0000039B  5E				POP		ESI
 0000039C  5A				POP		EDX
 0000039D  59				POP		ECX
 0000039E  5B				POP		EBX
 0000039F  58				POP		EAX
 000003A0  5D				POP		EBP

 000003A1  C2 0014			RET		20
 000003A4			displaySum ENDP


				; ---------------------------------------------------------------------------------
				; Name: displaySum
				;
				; displays added sum of numArray as string representation
				;
				; Preconditions: 'display', 'avgStr' are strings, 
				;					'MAX' is a global variable,	 'sum' and 'avg' are integers.
				;
				; Postconditions: none.
				;
				; Receives: [EBP + 24] = sum		(input)
				;			[EBP + 20] = avgStr		(reference, input)
				;			[EBP + 16] = MAX		(global variable, input)
				;			[EBP + 12] = avg		(reference, output)
				;			[EBP + 8] = display		(reference, output)
				; 
				;
				; returns: avg = avg of values in numArray
				; ---------------------------------------------------------------------------------
 000003A4			displayAvg PROC
					;	preserve registers and flags
 000003A4  55				PUSH	EBP
 000003A5  8B EC			MOV		EBP, ESP
 000003A7  50				PUSH	EAX
 000003A8  53				PUSH	EBX
 000003A9  51				PUSH	ECX
 000003AA  52				PUSH	EDX
 000003AB  56				PUSH	ESI
 000003AC  57				PUSH	EDI
 000003AD  9C				PUSHFD						
					
					;	initialize registers
 000003AE  8B 7D 0C			MOV		EDI, [EBP + 12]		; avg 
						
					mDisplayString	[EBP + 20]	; avgStr
 000003B1  52		     1		PUSH	EDX
 000003B2  8B 55 14	     1		MOV		EDX, [EBP + 20]
 000003B5  E8 00000000 E     1		CALL	WriteString
 000003BA  5A		     1		POP		EDX
 000003BB  E8 00000000 E		CALL	CrLf

					;	get average by sum/MAX
 000003C0  8B 45 18			MOV		EAX, [EBP + 24]		; sum
 000003C3  99				CDQ
 000003C4  8B 5D 10			MOV		EBX, [EBP + 16]		; MAX
 000003C7  F7 FB			IDIV	EBX

					;	move EAX to avg
 000003C9  89 07			MOV		[EDI], EAX

 000003CB  FF 37			PUSH	[EDI]			
 000003CD  FF 75 08			PUSH	[EBP + 8]			; display
 000003D0  E8 FFFFFEBB			CALL	WriteVal
 000003D5  E8 00000000 E		CALL	CrLf

					;	restore registers and flags
 000003DA  9D				POPFD						
 000003DB  5F				POP		EDI
 000003DC  5E				POP		ESI
 000003DD  5A				POP		EDX
 000003DE  59				POP		ECX
 000003DF  5B				POP		EBX
 000003E0  58				POP		EAX
 000003E1  5D				POP		EBP

 000003E2  C2 0014			RET		20
 000003E5			displayAvg ENDP


				END main
Microsoft (R) Macro Assembler Version 14.28.29334.0	    12/05/20 11:57:18
2String Primitives and Macros     (Proj6_lisco.asm	     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000383 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000003E5 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 000000E1 _TEXT	Length= 000001AF Public STDCALL
  _prompt  . . . . . . . . . . .	L Near	 000000F1 _TEXT	
  _checkSign . . . . . . . . . .	L Near	 0000012D _TEXT	
  _setNegative . . . . . . . . .	L Near	 00000148 _TEXT	
  _setPositive . . . . . . . . .	L Near	 00000167 _TEXT	
  _checkVal  . . . . . . . . . .	L Near	 00000186 _TEXT	
  _convert . . . . . . . . . . .	L Near	 0000019D _TEXT	
  _isNum . . . . . . . . . . . .	L Near	 000001D8 _TEXT	
  _restore . . . . . . . . . . .	L Near	 000001EF _TEXT	
  _notNum  . . . . . . . . . . .	L Near	 00000200 _TEXT	
  _error . . . . . . . . . . . .	L Near	 00000204 _TEXT	
  _negNum  . . . . . . . . . . .	L Near	 00000239 _TEXT	
  _posNum  . . . . . . . . . . .	L Near	 00000243 _TEXT	
  _displayValid  . . . . . . . .	L Near	 0000024E _TEXT	
  _pop . . . . . . . . . . . . .	L Near	 00000285 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 00000290 _TEXT	Length= 00000082 Public STDCALL
  _clear_memory  . . . . . . . .	L Near	 000002A2 _TEXT	
  _negative  . . . . . . . . . .	L Near	 000002BF _TEXT	
  _positive  . . . . . . . . . .	L Near	 000002C8 _TEXT	
  _divide  . . . . . . . . . . .	L Near	 000002CD _TEXT	
  _sign  . . . . . . . . . . . .	L Near	 000002E9 _TEXT	
  _write . . . . . . . . . . . .	L Near	 000002FB _TEXT	
  _pop . . . . . . . . . . . . .	L Near	 00000307 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
displayArray . . . . . . . . . .	P Near	 00000312 _TEXT	Length= 00000048 Public STDCALL
  _list  . . . . . . . . . . . .	L Near	 00000331 _TEXT	
displayAvg . . . . . . . . . . .	P Near	 000003A4 _TEXT	Length= 00000041 Public STDCALL
displaySum . . . . . . . . . . .	P Near	 0000035A _TEXT	Length= 0000004A Public STDCALL
  _sum . . . . . . . . . . . . .	L Near	 00000381 _TEXT	
introduction . . . . . . . . . .	P Near	 000000A8 _TEXT	Length= 00000039 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000A8 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FloatArray . . . . . . . . . . .	TByte	 0000031F _DATA	
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX  . . . . . . . . . . . . . .	Number	 0000000Ah   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
avgStr . . . . . . . . . . . . .	Byte	 0000022B _DATA	
avg  . . . . . . . . . . . . . .	DWord	 00000252 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
bracket  . . . . . . . . . . . .	Byte	 000002F7 _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
count  . . . . . . . . . . . . .	DWord	 000002F3 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
digit  . . . . . . . . . . . . .	DWord	 0000019F _DATA	
display  . . . . . . . . . . . .	Byte	 000001CB _DATA	
ecIntro  . . . . . . . . . . . .	Byte	 00000256 _DATA	
error  . . . . . . . . . . . . .	Byte	 000001A3 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro_1  . . . . . . . . . . . .	Byte	 00000039 _DATA	
len  . . . . . . . . . . . . . .	DWord	 00000173 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
list . . . . . . . . . . . . . .	Byte	 000001DB _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
numArray . . . . . . . . . . . .	DWord	 00000177 _DATA	
numString  . . . . . . . . . . .	Byte	 00000164 _DATA	
programTitle . . . . . . . . . .	Byte	 00000000 _DATA	
prompt . . . . . . . . . . . . .	Byte	 00000144 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
runningTotal . . . . . . . . . .	Byte	 000002FA _DATA	
space  . . . . . . . . . . . . .	Byte	 000001D9 _DATA	
sumStr . . . . . . . . . . . . .	Byte	 00000204 _DATA	
sum  . . . . . . . . . . . . . .	DWord	 00000227 _DATA	
total  . . . . . . . . . . . . .	DWord	 0000031B _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
